import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError
import nest_asyncio

API_ID = 28981728
API_HASH = '0bd5d70147496fa1c759a2db217b033a'
BOT_TOKEN = '7671639138:AAE3rEKUzxSfmrDtMOJd-tX4Khe_V25zjwo'  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®

PHONE, CODE, PASSWORD = range(3)
user_data_store = {}

nest_asyncio.apply()

# Semaphore ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡ßß‡ß¶ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶¨‡ßã (‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶æ‡ßú‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®)
semaphore = asyncio.Semaphore(10)

def get_keyboard(user_id):
    user_info = user_data_store.get(user_id, {})
    numbers = user_info.get('numbers', [])
    buttons = [[InlineKeyboardButton(num, callback_data=f"num_{num}")] for num in numbers]
    buttons.append([InlineKeyboardButton("‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã", callback_data='check')])
    buttons.append([InlineKeyboardButton("‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", callback_data='clear')])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await update.message.reply_text(
        "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n"
        "‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
        "‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§\n\n"
        "‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        reply_markup=get_keyboard(user_id)
    )

async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëâ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì (Country code ‡¶∏‡¶π, ‡¶Ø‡ßá‡¶Æ‡¶® +8801xxxxxxxxx):")
    return PHONE

async def login_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    client = TelegramClient(StringSession(), API_ID, API_HASH)
    await client.connect()
    try:
        await client.send_code_request(phone)
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}\n‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")
        await client.disconnect()
        return ConversationHandler.END

    context.user_data['phone'] = phone
    context.user_data['client'] = client
    await update.message.reply_text("üì© ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶ì:")
    return CODE

async def login_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    phone = context.user_data['phone']
    client: TelegramClient = context.user_data['client']

    try:
        await client.sign_in(phone, code)
    except SessionPasswordNeededError:
        await update.message.reply_text("üîê ‡ß®‡¶è‡¶´‡¶è ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®:")
        return PASSWORD
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡¶≤‡¶ó‡¶á‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}\n‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")
        await client.disconnect()
        return ConversationHandler.END

    session_str = client.session.save()
    user_id = update.message.from_user.id

    user_data_store[user_id] = {
        'session': session_str,
        'numbers': [],
        'client': client
    }

    await update.message.reply_text("‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
    return ConversationHandler.END

async def login_password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    user_id = update.message.from_user.id
    user_info = user_data_store.get(user_id)
    if not user_info:
        await update.message.reply_text("‚ùå ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßã‡•§")
        return ConversationHandler.END

    client = user_info['client']
    try:
        await client.sign_in(password=password)
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü: {e}\n‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")
        return ConversationHandler.END

    session_str = client.session.save()
    user_info['session'] = session_str

    await update.message.reply_text("‚úÖ ‡ß®‡¶è‡¶´‡¶è ‡¶∏‡¶π ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_info = user_data_store.get(user_id)
    if not user_info or 'session' not in user_info:
        await update.message.reply_text("‚ùå ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßã‡•§")
        return

    lines = update.message.text.strip().splitlines()
    cleaned = []
    for line in lines:
        num = line.strip().replace("+", "").replace(" ", "")
        if not num.isdigit():
            continue
        if num.startswith("880"):
            cleaned.append("+" + num)
        elif num.startswith("0"):
            cleaned.append("+880" + num[1:])
        elif num.startswith("88"):
            cleaned.append("+" + num)
        else:
            cleaned.append("+" + num)
    cleaned = list(dict.fromkeys(cleaned))

    if not cleaned:
        await update.message.reply_text("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶á‡¶®‡¶ø‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")
        return

    user_info['numbers'] = cleaned
    await update.message.reply_text(
        f"‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ {len(cleaned)} ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
        reply_markup=get_keyboard(user_id)
    )

async def check_single_number(client, num):
    async with semaphore:
        try:
            entity = await client.get_entity(num)
            full_name = f"{entity.first_name or ''} {entity.last_name or ''}".strip()
            if not full_name:
                full_name = "‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø"
            return (num, full_name, True)
        except Exception:
            return (num, None, False)

async def check_numbers_telethon(client, numbers):
    tasks = [check_single_number(client, num) for num in numbers]
    results = await asyncio.gather(*tasks)
    return results

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    user_info = user_data_store.get(user_id)

    if data == 'check':
        if not user_info or 'numbers' not in user_info or not user_info['numbers']:
            await query.edit_message_text("‚ùå ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì ‡¶®‡¶ø‡•§", reply_markup=get_keyboard(user_id))
            return
        if 'client' not in user_info:
            await query.edit_message_text("‚ùå ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßã‡•§", reply_markup=get_keyboard(user_id))
            return

        await query.edit_message_text("‚è≥ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", reply_markup=None)
        try:
            results = await check_numbers_telethon(user_info['client'], user_info['numbers'])
            found = []
            not_found = []
            for num, full_name, found_flag in results:
                if found_flag:
                    found.append(f"{num} ‚û°Ô∏è {full_name}")
                else:
                    not_found.append(num)

            msg_parts = []
            if found:
                msg_parts.append("‚úÖ Telegram ‡¶è ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:\n" + '\n'.join(found))
            if not_found:
                msg_parts.append("‚ùå Telegram ‡¶è ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø:\n" + '\n'.join(not_found))

            await query.edit_message_text('\n\n'.join(msg_parts), reply_markup=get_keyboard(user_id))
        except Exception as e:
            await query.edit_message_text(f"‚ùå ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}", reply_markup=get_keyboard(user_id))

    elif data.startswith('num_'):
        number = data[4:]
        if not user_info or 'client' not in user_info:
            await query.edit_message_text("‚ùå ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßã‡•§", reply_markup=get_keyboard(user_id))
            return

        client = user_info['client']
        try:
            entity = await client.get_entity(number)
            full_name = f"{entity.first_name or ''} {entity.last_name or ''}".strip()
            if not full_name:
                full_name = "‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø"
            response = f"‚úÖ {number} - Telegram ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá: {full_name}"
        except:
            response = f"‚ùå {number} - Telegram ‡¶è ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"

        if number in user_info.get('numbers', []):
            user_info['numbers'].remove(number)

        await query.edit_message_text(response, reply_markup=get_keyboard(user_id))

    elif data == 'clear':
        if user_info:
            user_info['numbers'] = []
        await query.edit_message_text("‚úÖ ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", reply_markup=get_keyboard(user_id))

async def login_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('login', login_start)],
        states={
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_phone_handler)],
            CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_code_handler)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password_handler)],
        },
        fallbacks=[CommandHandler('cancel', login_cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_click))

    print("ü§ñ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶≤‡ßã...")
    app.run_polling()

if __name__ == '__main__':
    main()
